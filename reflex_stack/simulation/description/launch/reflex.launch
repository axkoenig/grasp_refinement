<?xml version="1.0"?>
<launch>

    <!-- custom arguments -->
    <arg name="run_sensors_node" default="true" />
    <arg name="run_wrist_controller_node" default="true" />
    <arg name="run_keyboard_teleop_nodes" default="false" />
    <arg name="run_reflex_interface_node" default="true" />
    <arg name="launch_finger_controllers" default="true" />
    <arg name="base_link_name" default="shell" />

    <!-- this is a parameter on real reflex which we simulate: any sensor pressure below the threshold will not be reported as a contact 
         the param is necessary on real hand because sensors are noisy and usually report pressures \in [-3,3] if there is no contact. -->
    <arg name="default_contact_threshold" default="5" />
    <param name="default_contact_threshold" value="$(arg default_contact_threshold)" />
	
    <!-- grasp and object poses -->
    <rosparam file="$(find description)/config/grasp_poses.yaml"/>

    <!-- tell reflex_interface that we're running in simulation -->
    <arg name="use_sim_data_hand" default="true" />
    <param name="use_sim_data_hand" value="$(arg use_sim_data_hand)" />
    <arg name="use_sim_data_obj" default="true" />
    <param name="use_sim_data_obj" value="$(arg use_sim_data_obj)" />

    <!-- effective publishing rate of real reflex is 40Hz -->
    <arg name="reflex_pub_rate" default="40" />
    <param name="reflex_pub_rate" value="$(arg reflex_pub_rate)" />

    <!-- "true" will significantly speed up your simulation as I use simplfied collision meshes. Turn on
         "view" -> "collisions" in Gazebo to see the collision meshes -->
    <arg name="simplify_collisions" default="true" />
    <param name="simplify_collisions" value="$(arg simplify_collisions)" />

    <!-- currently supports "sphere", "box", "cylinder" -->
    <arg name="spawn_object" default="true" />
    <arg name="object_name" default="cylinder" />

    <!-- load robot_name to parameter server -->
    <arg name="robot_name" default="reflex" />
    <param name="robot_name" value="$(arg robot_name)" />

    <!-- if running on real robot or in simulation_only (relevant for baseline_commander.cpp) -->
    <arg name="simulation_only" default="true" />
    <param name="simulation_only" value="$(arg simulation_only)" />

    <!-- gazebo arguments  -->
    <arg name="debug" default="false" />
    <arg name="gui" default="true" />
    <arg name="pause" default="false" />
    <arg name="world_name" default="$(find description)/worlds/reflex.world" />

    <!-- include gazebo_ros launcher -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world_name)" />
        <arg name="debug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg pause)" />
        <arg name="use_sim_time" value="true" />
        <arg name="physics" value="dart" />
        <arg name="verbose" value="true" />
    </include>

    <!-- spawning objects here first (before spawning reflex) -->
    <include file="$(find description)/launch/object.launch" if="$(arg spawn_object)">
        <arg name="object_name" value="$(arg object_name)"/>
    </include>

    <param name="robot_description" command="
        $(find xacro)/xacro '$(find description)/robots/reflex.robot.xacro' only_reflex:=true base_link_name:=$(arg base_link_name) reflex_pub_rate:=$(arg reflex_pub_rate) simplify_collisions:=$(arg simplify_collisions)"/>

    <!-- wait before launching reflex (this makes sure that the contact normals are pointing from reflex to object. this actually is an easy fix (simply everse contact normals and forces when pointing the wrong way) 
         but for some reason the spawning order also influences how Gazebo calculates forces. I noticed that forces are more "usable" and stable when normals point from reflex to object.
         TODO check if this is really a Gazebo bug or if we can treat this in a nicer way ...-->
    <arg name="reflex_spawn_delay" default="2" />
    <arg name="nodes_spawn_delay" default="4" />
    
    <node name="reflex_spawn" pkg="gazebo_ros" type="spawn_model" output="screen" args="-urdf -param robot_description -model $(arg robot_name)" launch-prefix="bash -c 'sleep $(arg reflex_spawn_delay); $0 $@' " />

    <!-- Keyboard teleoperation node for wrist and fingers-->
    <group if="$(arg run_keyboard_teleop_nodes)">
        <node pkg="reflex_interface" type="finger_teleop_node" name="finger_teleop_node" output="screen" launch-prefix="bash -c 'sleep $(arg nodes_spawn_delay); $0 $@' " />
        <!-- TODO: I would like to split functionality (into a wrist teleop node and a finger teleop node and run both at once, but 
        keyboard input doesn't work smoothly if both nodes are run, presumably because two nodes are reading from the keyboard and 
        they interfere. Leaving wrist + finger controller combined in finger_teleop_node for now, because it works better. -->
        <!-- <node pkg="wrist_controller" type="wrist_teleop_node" name="wrist_teleop_node" output="screen"/> -->
    </group>

    <!-- Launch controllers -->
    <group if="$(arg launch_finger_controllers)">
        <include file="$(find finger_controller)/launch/reflex_control.launch">
            <arg name="spawn_delay" value="$(arg nodes_spawn_delay)" />
        </include>
    </group>

    <!-- Sensors node -->
    <group if="$(arg run_sensors_node)">
        <node pkg="sensor_listener" type="sensor_listener_node" name="sensor_listener_node" output="screen" launch-prefix="bash -c 'sleep $(arg nodes_spawn_delay); $0 $@' " />
    </group>

    <!-- Run reflex interface node -->
    <group if="$(arg run_reflex_interface_node)">
        <node pkg="reflex_interface" type="reflex_interface_node" name="reflex_interface_node" output="screen" launch-prefix="bash -c 'sleep $(arg nodes_spawn_delay); $0 $@' " />
    </group>

    <!-- Wrist controller node -->
    <group if="$(arg run_wrist_controller_node)">
        <include file="$(find wrist_controller)/launch/wrist_controller.launch">
            <arg name="spawn_delay" value="$(arg nodes_spawn_delay)" />
        </include>
    </group>

</launch>
